syntax = "proto3";

option go_package = "./dtmgpb";
option java_package = "io.github.dtm.labs.core.mode.tcc.impl";
option java_multiple_files = true;
import "google/protobuf/empty.proto";

package dtmgimp;

// The dtm service definition.
service Dtm {
  rpc NewGid(google.protobuf.Empty) returns (DtmGidReply) {}
  rpc Submit(DtmRequest) returns (google.protobuf.Empty) {}
  rpc Prepare(DtmRequest) returns (google.protobuf.Empty) {}
  rpc Abort(DtmRequest) returns (google.protobuf.Empty) {}
  rpc RegisterBranch(DtmBranchRequest) returns (google.protobuf.Empty) {}
  rpc PrepareWorkflow(DtmRequest) returns (DtmProgressesReply) {}
}

message DtmTransOptions {
  bool WaitResult = 1;
  int64 TimeoutToFail = 2;
  int64 RetryInterval = 3;
  repeated string PassthroughHeaders = 4;
  map<string, string> BranchHeaders = 5;
  int64 RequestTimeout = 6;
}

// DtmRequest request sent to dtm server
message DtmRequest {
  string Gid = 1;
  string TransType = 2;
  DtmTransOptions TransOptions = 3;
  string CustomedData = 4;
  repeated bytes BinPayloads = 5; // for Msg/Saga/Workflow branch payloads
  string QueryPrepared = 6; // for Msg
  string Steps = 7;
  map<string, string> ReqExtra = 8;
  string RollbackReason = 9;
}

message DtmGidReply {
  string Gid = 1;
}

message DtmBranchRequest {
  string Gid = 1;
  string TransType = 2;
  string BranchID = 3;
  string Op = 4;
  map<string, string> Data = 5;
  bytes BusiPayload = 6;
}

message DtmProgressesReply {
  repeated DtmProgress Progresses = 1;
}

message DtmProgress {
  string Status = 1;
  bytes BinData = 2;
  string BranchID = 3;
  string Op = 4;
}
